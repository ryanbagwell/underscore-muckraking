// Generated by CoffeeScript 1.6.3
(function() {
  _.mixin({
    resizeToFill: function(wrapset, containerEl, callback) {
      _.each($(wrapset), function(el) {
        var $containerEl, elHeight, elWidth, fitHeight, fitWidth, naturalSize;
        $containerEl = $(_.chain([containerEl, $(el).parent(), window]).compact().first().value());
        fitWidth = $containerEl.outerWidth();
        fitHeight = $containerEl.outerHeight();
        naturalSize = _.getNaturalSize(el);
        elWidth = naturalSize[0];
        elHeight = naturalSize[1];
        while (elWidth >= fitWidth && elHeight >= fitHeight) {
          elWidth--;
          elHeight--;
        }
        return $(el).attr({
          'width': elWidth + 1,
          'height': elHeight + 1
        }).css({
          'width': (elWidth + 1) + 'px',
          'height': (elHeight + 1) + 'px'
        }).addClass('resized');
      });
      if (!!_.isFunction(callback)) {
        return callback(wrapset);
      }
    },
    preloadImages: function(imgEl) {
      return _.each($(imgEl), function(image) {
        var $image, img;
        $image = $(image);
        img = new Image();
        img.onload = _.bind(function() {
          $image.data({
            'natural-width': img.width,
            'natural-height': img.height
          });
          $image.addClass('preloaded');
          return $image.trigger('imagePreloaded');
        }, this);
        return img.src = $image.attr('src');
      });
    },
    capitalize: function(str) {
      return str.charAt(0).toUpperCase() + str.substring(1).toLowerCase();
    },
    log: function(message, trace) {
      var err;
      try {
        console.log(message);
        if (!!trace) {
          return console.trace();
        }
      } catch (_error) {
        err = _error;
      }
    },
    inArray: function(arr, val) {
      return _.contains(array, val);
    },
    quoteVal: function(val) {
      return _.template('"<%= val >"', {
        'val': 'val',
        val: val
      });
    },
    formatCurrency: function(number) {
      var val;
      val = number.toString().split('');
      val.splice(1, 0, ',');
      return '$' + val.join('');
    },
    "default": function(val, defaultVal) {
      if (_.isNull(val) || _.isUndefined(val) || _.isEmpty(val)) {
        return defaultVal;
      }
      return val;
    },
    inViewport: function(el) {
      var elBounds;
      elBounds = $(el).get(0).getBoundingClientRect();
      return elBounds.top >= 0 && elBounds.left >= 0 && elBounds.top <= (window.innerHeight || document.documentElement.clientHeight) && elBounds.left <= (window.innerWidth || document.documentElement.clientWidth);
    }
  });

}).call(this);

/*
//@ sourceMappingURL=muckraking.map
*/
